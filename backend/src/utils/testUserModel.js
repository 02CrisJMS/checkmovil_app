// Script de prueba para verificar el modelo de usuario
require('dotenv').config();

const mongoose = require('mongoose');
const User = require('../models/User');

// Obtener la URI de MongoDB desde las variables de entorno
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/checkmovil_db';

console.log('üß™ Iniciando prueba del modelo de usuario...');
console.log(`üìä URI de conexi√≥n: ${MONGODB_URI}`);

// Funci√≥n para probar el modelo de usuario
async function testUserModel() {
    try {
        // Conectar a MongoDB
        console.log('üîÑ Conectando a MongoDB...');
        await mongoose.connect(MONGODB_URI);
        console.log('‚úÖ Conectado a MongoDB exitosamente.');

        // Limpiar la colecci√≥n de usuarios para pruebas
        console.log('üßπ Limpiando colecci√≥n de usuarios...');
        await User.deleteMany({});
        console.log('‚úÖ Colecci√≥n limpiada.');

        // Prueba 1: Crear un usuario v√°lido
        console.log('\nüìù Prueba 1: Crear usuario v√°lido');
        const testUser = new User({
            username: 'testuser',
            password: 'password123',
            pin: '1234',
            role: 'cajero',
            isVerified: false,
            status: 'active'
        });

        await testUser.save();
        console.log('‚úÖ Usuario creado exitosamente.');
        console.log(`   - ID: ${testUser.id}`);
        console.log(`   - Username: ${testUser.username}`);
        console.log(`   - Role: ${testUser.role}`);
        console.log(`   - Status: ${testUser.status}`);
        console.log(`   - Password hasheada: ${testUser.password ? 'S√≠' : 'No'}`);

        // Prueba 2: Verificar que la contrase√±a se hashe√≥
        console.log('\nüîê Prueba 2: Verificar hash de contrase√±a');
        const savedUser = await User.findById(testUser.id).select('+password');
        console.log(`   - Contrase√±a original: password123`);
        console.log(`   - Contrase√±a hasheada: ${savedUser.password}`);
        console.log(`   - ¬øEs diferente?: ${savedUser.password !== 'password123' ? 'S√≠' : 'No'}`);

        // Prueba 3: Comparar contrase√±as
        console.log('\nüîç Prueba 3: Comparar contrase√±as');
        const isPasswordValid = await savedUser.comparePassword('password123');
        const isPasswordInvalid = await savedUser.comparePassword('wrongpassword');
        console.log(`   - Contrase√±a correcta: ${isPasswordValid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida'}`);
        console.log(`   - Contrase√±a incorrecta: ${isPasswordInvalid ? '‚ùå V√°lida' : '‚úÖ Inv√°lida'}`);

        // Prueba 4: Verificar m√©todos del modelo
        console.log('\n‚öôÔ∏è Prueba 4: Verificar m√©todos del modelo');
        console.log(`   - ¬øUsuario activo?: ${savedUser.isActive() ? 'S√≠' : 'No'}`);
        console.log(`   - ¬øUsuario verificado?: ${savedUser.isUserVerified() ? 'S√≠' : 'No'}`);

        // Prueba 5: Crear usuario con rol diferente
        console.log('\nüë• Prueba 5: Crear usuario supervisor');
        const supervisorUser = new User({
            username: 'supervisor1',
            password: 'supervisor123',
            pin: '5678',
            role: 'supervisor',
            isVerified: true,
            status: 'active'
        });

        await supervisorUser.save();
        console.log('‚úÖ Supervisor creado exitosamente.');

        // Prueba 6: Usar m√©todos est√°ticos
        console.log('\nüîç Prueba 6: M√©todos est√°ticos');
        const cajeros = await User.findByRole('cajero');
        const activos = await User.findActive();
        console.log(`   - Cajeros encontrados: ${cajeros.length}`);
        console.log(`   - Usuarios activos: ${activos.length}`);

        // Prueba 7: Verificar validaciones
        console.log('\n‚ö†Ô∏è Prueba 7: Validaciones del modelo');
        try {
            const invalidUser = new User({
                username: 'ab', // Muy corto
                password: '123', // Muy corta
                role: 'invalid_role' // Rol inv√°lido
            });
            await invalidUser.save();
        } catch (error) {
            console.log('‚úÖ Validaciones funcionando correctamente:');
            console.log(`   - Error: ${error.message}`);
        }

        // Prueba 8: Verificar unicidad
        console.log('\nüîí Prueba 8: Verificar unicidad');
        try {
            const duplicateUser = new User({
                username: 'testuser', // Username duplicado
                password: 'password123',
                pin: '9999',
                role: 'cajero'
            });
            await duplicateUser.save();
        } catch (error) {
            console.log('‚úÖ Unicidad funcionando correctamente:');
            console.log(`   - Error: ${error.message}`);
        }

        // Limpiar despu√©s de las pruebas
        console.log('\nüßπ Limpiando datos de prueba...');
        await User.deleteMany({});
        console.log('‚úÖ Datos de prueba eliminados.');

        // Cerrar conexi√≥n
        await mongoose.connection.close();
        console.log('üîí Conexi√≥n cerrada correctamente.');
        
        console.log('\nüéâ ¬°Todas las pruebas del modelo de usuario pasaron exitosamente!');
        process.exit(0);

    } catch (error) {
        console.error('‚ùå Error en las pruebas del modelo de usuario:');
        console.error(`   Tipo: ${error.name}`);
        console.error(`   Mensaje: ${error.message}`);
        
        if (mongoose.connection.readyState === 1) {
            await mongoose.connection.close();
        }
        
        process.exit(1);
    }
}

// Ejecutar las pruebas
testUserModel(); 